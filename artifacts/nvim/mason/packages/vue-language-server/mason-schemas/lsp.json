{"type":"object","properties":{"vue.server.maxOldSpaceSize":{"type":["number","null"],"default":null,"description":"Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it."},"vue.doctor.status":{"type":"boolean","default":true,"description":"Show known problems in status bar."},"vue.complete.defineAssignment":{"type":"boolean","default":true,"description":"Auto add `const props = ` before `defineProps` when selecting the completion item `props`. (also `emit` and `slots`)"},"vue.splitEditors.icon":{"type":"boolean","default":false,"description":"Show split editor icon in title area of editor."},"vue.autoInsert.dotValue":{"type":"boolean","default":false,"description":"Auto-complete Ref value with `.value`."},"vue.splitEditors.layout.left":{"type":"array","items":{"type":"string"},"default":["script","scriptSetup","styles"]},"vue.autoInsert.bracketSpacing":{"type":"boolean","default":true,"description":"Auto add space between double curly brackets: {{|}} -> {{ | }}"},"vue.splitEditors.layout.right":{"type":"array","items":{"type":"string"},"default":["template","customBlocks"]},"vue.inlayHints.destructuredProps":{"type":"boolean","markdownDescription":"Show inlay hints for destructured props:\n\n```ts\nwatch(() => /* props. */foo, () => { ... });\n```","default":false},"vue.updateImportsOnFileMove.enabled":{"type":"boolean","default":true,"description":"Enabled update imports on file move."},"vue.codeActions.enabled":{"type":"boolean","default":true,"description":"Enabled code actions."},"vue.codeActions.askNewComponentName":{"type":"boolean","default":true,"description":"Ask for new component name when extract component."},"vue.codeLens.enabled":{"type":"boolean","default":true,"description":"Enabled code lens."},"vue.complete.casing.tags":{"type":"string","default":"autoPascal","enumDescriptions":["Auto Detect from Content (Fallback to <kebab-case> if detect failed)","Auto Detect from Content  (Fallback to <PascalCase> if detect failed)","<kebab-case>","<PascalCase>"],"enum":["autoKebab","autoPascal","kebab","pascal"],"description":"Preferred tag name case."},"vue.format.wrapAttributes":{"type":"string","enum":["auto","force","force-aligned","force-expand-multiline","aligned-multiple","preserve","preserve-aligned"],"default":"auto"},"vue.trace.server":{"type":"string","default":"off","enum":["off","messages","verbose"],"scope":"window","description":"Traces the communication between VS Code and the language server."},"vue.format.script.initialIndent":{"type":"boolean","default":false},"vue.server.hybridMode":{"type":["boolean","string"],"default":"auto","enum":["auto","typeScriptPluginOnly",true,false],"enumDescriptions":["Automatically detect and enable TypeScript Plugin/Hybrid Mode in a safe environment.","Only enable Vue TypeScript Plugin but disable Hybrid Mode.","Enable TypeScript Plugin/Hybrid Mode.","Disable TypeScript Plugin/Hybrid Mode."],"description":"Vue language server only handles CSS and HTML language support, and tsserver takes over TS language support via TS plugin."},"vue.format.style.initialIndent":{"type":"boolean","default":false},"vue.format.template.initialIndent":{"type":"boolean","default":true},"vue.inlayHints.vBindShorthand":{"type":"boolean","markdownDescription":"Show inlay hints for v-bind shorthand:\n\n```html\n<Comp :foo />\n     <!-- ^ =\"foo\" -->\n```","default":false},"vue.inlayHints.optionsWrapper":{"type":"boolean","markdownDescription":"Show inlay hints for component options wrapper for type support:\n\n```vue\n<script lang=\"ts\">\nexport default /* (await import('vue')).defineComponent( */{}/* ) */;\n</script>\n```","default":false},"vue.complete.casing.props":{"type":"string","default":"autoKebab","enumDescriptions":["Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)","Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",":kebab-case=\"...\"",":camelCase=\"...\""],"enum":["autoKebab","autoCamel","kebab","camel"],"description":"Preferred attr name case."},"vue.inlayHints.inlineHandlerLeading":{"type":"boolean","markdownDescription":"Show inlay hints for event argument in inline handlers:\n\n```html\n<Comp @foo=\"/* $event => */console.log($event)\" />\n```","default":false},"vue.server.compatibleExtensions":{"type":"array","items":{"type":"string"},"default":[],"description":"Set compatible extensions to skip automatic detection of Hybrid Mode."},"vue.inlayHints.missingProps":{"type":"boolean","markdownDescription":"Show inlay hints for missing required props:\n\n```html\n<Comp />\n<!-- ^ foo! -->\n```","default":false},"vue.server.includeLanguages":{"type":"array","items":{"type":"string"},"default":["vue"]}},"title":"Vue"}